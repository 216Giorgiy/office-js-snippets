id: cj0ycqwd400004q78htsihvy0
gist: ''
host: WORD
api_set: {}
platform: PC
origin: 'https://bornholm-edge.azurewebsites.net'
author: Microsoft
name: Insert formatted text
description: Shows how to use formatting objects as well as applying pre-built styles.
script:
  content: |
    $("#run").click(run);

    async function run() {
        try {
            await Word.run(async (context) => {
                // Here we go to insert first sentence. Then we adjust the formatting.
                // Note that replace affects the calling object, in this case the entire document body.
                // A similar method can also be used at the range level.
                var firstSentence = context.document.body.insertText("This is some formatted text!", "replace");
                firstSentence.font.name = "Courier New";
                firstSentence.font.bold = true;
                firstSentence.font.size = 18;

                // Second sentence, let's insert it after the previously inserted one.
                var secondSentence = context.document.body.insertText("This is other formatted text.", "end");
                secondSentence.font.bold = false;
                secondSentence.font.italic = true;
                secondSentence.font.name = "Berlin Sans FB";
                secondSentence.font.size = 30;
                secondSentence.font.color = "blue";

                // You can also use pre-exsiting styles.
                var lastSentence = context.document.body.insertParagraph("To be or not to be", "end");

                // Use styleBuiltIn to use an enumeration of existing styles. If your style is custom make sure to use range.style = "name of your style";
                lastSentence.styleBuiltIn = Word.Style.intenseReference;

                await context.sync()
                console.log("success");
            })
        } catch (e) {
            OfficeHelpers.Utilities.log(e);
        }
    }
  language: typescript
style:
  content: |-
    body {
        margin: 0;
        padding: 10px;
    }


    /* Button customization, including overwriting some Fabric defaults */

    .ms-Button, .ms-Button:focus {
        background: #2b579a;
        border: #2b579a;
    }

        .ms-Button > .ms-Button-label,
        .ms-Button:focus > .ms-Button-label,
        .ms-Button:hover > .ms-Button-label {
            color: white;
        }

        .ms-Button:hover, .ms-Button:active {
            background: #204072;
        }

        .ms-Button.is-disabled, .ms-Button:disabled {
            background-color: #f4f4f4;
            border-color: #f4f4f4;
        }

        .ms-Button.is-disabled .ms-Button-label,
        .ms-Button:disabled .ms-Button-label {
            color: #a6a6a6;
        }
  language: css
template:
  content: >-
    <p class="ms-font-m">Shows how to insert basic formatted text and apply
    built-in styles.</p>

    <button id="run" class="ms-Button">
        <span class="ms-Button-label">Run code</span>
    </button>
  language: html
libraries: |-
  // Office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/Office.js

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts
