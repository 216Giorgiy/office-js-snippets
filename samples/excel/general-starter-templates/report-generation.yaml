id: cixuwzxmy00014q71374v0gtc
gist: d1cb7df01dabb66b046cd2c7881248e4
source: ''
author: Microsoft
name: Report generation
description: >-
  Writes data to the workbook, reads and applies basic formatting, and adds a
  chart bound to that data.
script:
  content: |-
    $('#create-report').click(createReport);

    /** Load sample data into a new worksheet and create a chart */
    async function createReport() {
        try {
            await Excel.run(async (context) => {
                try {
                    // Create a proxy object for a new worksheet
                    let sheet = context.workbook.worksheets.add();
                    await queueWriteSheetData(sheet);
                    sheet.activate();
                    await context.sync();
                }
                catch (error) {
                    // Try to activate the new sheet regardless, to show
                    // how far the processing got before failing
                    sheet.activate();
                    await context.sync();

                    // Then re-throw the original error, for appropriate error-handling
                    // (in this snippet, simply showing a notification)
                    throw error;
                }
            });

            showNotification("Success", "Report-generation complete!");
        } catch (error) {
            handleError(error);
        }

        // Helper functions:

        async function queueWriteSheetData(sheet: Excel.Worksheet) {
            // Queue commands to set the report title in the worksheet
            let titleCell = sheet.getCell(0, 0);
            titleCell.values = [["Quarterly Sales Report"]];
            titleCell.format.font.name = "Century";
            titleCell.format.font.size = 26;

            // Create an array containing sample data
            let headerNames = ["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"];
            let data = [
                ["Frames", 5000, 7000, 6544, 4377],
                ["Saddles", 400, 323, 276, 651],
                ["Brake levers", 12000, 8766, 8456, 9812],
                ["Chains", 1550, 1088, 692, 853],
                ["Mirrors", 225, 600, 923, 544],
                ["Spokes", 6005, 7634, 4589, 8765]
            ];

            // Queue a command to write the sample data to the
            // specified range in the worksheet and bold the header row
            let headerRow = titleCell.getOffsetRange(1, 0)
                .getResizedRange(0, headerNames.length - 1);
            headerRow.values = [headerNames];
            headerRow.getRow(0).format.font.bold = true;

            let dataRange = headerRow.getOffsetRange(1, 0)
                .getResizedRange(data.length - 1, 0);
            dataRange.values = data;

            if (Office.context.requirements.isSetSupported('ExcelApi', 1.2)) {
                titleCell.getResizedRange(0, headerNames.length - 1).merge();
                dataRange.format.autofitColumns();

                let columnRanges: Excel.Range[] = [];
                for (let i = 0; i < headerNames.length; i++) {
                    columnRanges.push(dataRange.getColumn(i).load("format/columnWidth"));
                };
                await sheet.context.sync();

                // For the header (product name) column, make it a minimum of 100px;
                let firstColumn = columnRanges.shift();
                if (firstColumn.format.columnWidth < 100) {
                    console.log("Expanding the first column to 100px");
                    firstColumn.format.columnWidth = 100;
                }

                // For the remainder, make them identical or a minimum of 60px
                let minColumnWidth = 60;
                columnRanges.forEach(function (column, index) {
                    console.log(`Column #${index + 1}: auto-fitted width = ${column.format.columnWidth}`);
                    minColumnWidth = Math.max(minColumnWidth, column.format.columnWidth);                
                })
                console.log(`Setting data columns to a width of ${minColumnWidth} pixels`);
                dataRange.getOffsetRange(0, 1).getResizedRange(0, -1)
                    .format.columnWidth = minColumnWidth;
            } else {
                console.log('Cannot auto-fit column widths; consider updating to a newer version of Excel');
            }

            // Queue a command to add a new chart
            let chart = sheet.charts.add(
                Excel.ChartType.columnClustered,
                dataRange, Excel.ChartSeriesBy.columns);

            // Queue commands to set the properties and format the chart
            let chartTopRow = dataRange.getLastRow().getOffsetRange(2, 0);
            chart.setPosition(chartTopRow, chartTopRow.getOffsetRange(14, 0));
            chart.title.text = "Quarterly sales chart";
            chart.legend.position = "right"
            chart.legend.format.fill.setSolidColor("white");
            chart.dataLabels.format.font.size = 15;
            chart.dataLabels.format.font.color = "black";
            let points = chart.series.getItemAt(0).points;
            points.getItemAt(0).format.fill.setSolidColor("pink");
            points.getItemAt(1).format.fill.setSolidColor('indigo');
        }
    }

    function handleError(error) {
        showNotification("Error", error);
        OfficeHelpers.Utilities.log(error);
    }

    function showNotification(header, text) {
        let container = document.getElementById('notification-popup');
        let headerPlaceholder = container.querySelector('.notification-popup-title');
        let textPlaceholder = container.querySelector('.ms-MessageBanner-clipper');

        headerPlaceholder.textContent = header;
        textPlaceholder.textContent = text;
            
        let closeButton = container.querySelector('.ms-MessageBanner-close');
        closeButton.addEventListener("click", function () {
            if (container.className.indexOf("hide") === -1) {
                container.className = "ms-MessageBanner is-hidden";
            }
            closeButton.removeEventListener("click", null);
        });

        container.className = "ms-MessageBanner is-expanded";
    }
  language: typescript
style:
  content: >-
    body {
        margin: 0;
        padding: 0;
    }


    #content-header {
        background: #333;
        color: #fff;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 80px; /* Fixed header height */
        padding: 10px 15px;
        box-sizing: border-box;
        overflow: hidden; /* Disable scrollbars for header */
    }


    #content-main {
        background: #fff;
        position: fixed;
        top: 80px; /* Same value as #content-header's height */
        left: 0;
        right: 0;
        bottom: 0;
        padding: 10px 15px;
        box-sizing: border-box;
        overflow: auto; /* Enable scrollbars within main content section */
    }



    /* Button customization, including overwriting some Fabric defaults */


    .ms-Button, .ms-Button:focus {
        background: #217346;
        border: #217346;
    }

        .ms-Button > .ms-Button-label,
        .ms-Button:focus > .ms-Button-label,
        .ms-Button:hover > .ms-Button-label {
            color: white;
        }

        .ms-Button:hover, .ms-Button:active {
            background: #164b2e;
        }

        .ms-Button.is-disabled, .ms-Button:disabled {
            background-color: #f4f4f4;
            border-color: #f4f4f4;
        }

        .ms-Button.is-disabled .ms-Button-label,
        .ms-Button:disabled .ms-Button-label {
            color: #a6a6a6;
        }


    /* Notification pane customizations, including overwriting some Fabric
    defaults */


    #notification-popup .notification-popup-title {
        text-align: left;
        margin: 15px 50px 0 15px;
    }


    #notification-popup.ms-MessageBanner {
        position: absolute;
        left: 0px;
        bottom: 0px;
        text-align: left;
        height: inherit;
        min-width: inherit;
    }


    #notification-popup .ms-MessageBanner-text {
        margin: 0;
        padding: 18px 15px;
        min-width: inherit;
    }
  language: css
template:
  content: |
    <div id="content-header" class="ms-font-m">
        <h1>Welcome</h1>
    </div>

    <div id="content-main" class="ms-font-m">
        <p>This sample shows how to load some sample data into the worksheet, and then create a chart using the Excel JavaScript API.</p>
        <h3>Try it out</h3>
        <button id="create-report" class="ms-Button">
            <span class="ms-Button-label">Create report</span>
        </button>
    </div>

    <div id="notification-popup" class="ms-MessageBanner is-hidden">
        <div class="notification-popup-title ms-fontSize-l ms-fontWeight-semibold"></div>
        <div class="ms-MessageBanner-content">
            <div class="ms-MessageBanner-text">
                <div class="ms-MessageBanner-clipper"></div>
            </div>
        </div>
        <button class="ms-MessageBanner-close">
            <i class="ms-Icon ms-Icon--Cancel"></i>
        </button>
    </div>
  language: html
libraries: |-
  // Office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/Office.js

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts
