id: ''
gist: ''
source: EXCEL
author: Microsoft
name: Range basics
description: Explores the most common Range APIs
script:
  content: |
    $("#setup").click(setup);

    $("#set-value").click(setValue);
    $("#set-values").click(setValues);
    $("#set-formula").click(setFormula);
    $("#set-formulas").click(setFormulas);
    $("#set-formulas-r1c1").click(setFormulasR1C1);
    $("#get-values").click(getValues);
    $("#get-texts").click(getTexts);
    $("#get-formulas").click(getFormulas);

    async function setup() {
        try {
            await Excel.run(async (context) => {
                
                await resetWorksheet(context.workbook.worksheets.getActiveWorksheet());
                
                let sheet = context.workbook.worksheets.getActiveWorksheet();

                let data = [
                    ["Product", "Qty", "Unit Price"],
                    ["Almonds", 2, 7.50],
                    ["Coffee", 1, 34.50],
                    ["Chocolate", 5, 9.56]
                ];

                let range = sheet.getRange("B2:D5");
                range.values = data;
                range.format.autofitColumns();

                let header = sheet.getRange("B2:D2");
                header.format.fill.color = "#4472C4";;
                header.format.font.color = "white";

                await context.sync();
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function resetWorksheet(sheet: Excel.Worksheet) {
        let context = <Excel.RequestContext>sheet.context;

        sheet.load("name, position");

        await context.sync();

        let newSheet = context.workbook.worksheets.add();
        newSheet.position = sheet.position;
        sheet.delete();
        newSheet.name = sheet.name;
        newSheet.activate();

        await context.sync();
    }

    async function setValue() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();

                let range = sheet.getRange("C3");
                range.values = [[ 5 ]];
                range.format.autofitColumns();

                await context.sync();
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function setValues() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();

                let data = [
                    ["Potato Chips", 10, 1.80, null],
                ];
                
                let range = sheet.getRange("B5:E5");
                range.values = data;
                range.format.autofitColumns();

                await context.sync();
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function setFormula() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();

                let range = sheet.getRange("E3");
                range.formulas = [[ "=C3 * D3" ]];
                range.format.autofitColumns();

                await context.sync();
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function setFormulas() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();

                let data = [
                    ["Total Price"],
                    ["=C3 * D3"],
                    ["=C4 * D4"],
                    ["=C5 * D5"],
                    ["=SUM(E3:E5)"]
                ];
                
                let range = sheet.getRange("E2:E6");
                range.formulas = data;
                range.format.autofitColumns();

                await context.sync();
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function setFormulasR1C1() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();

                let data = [
                    ["Total Price"],
                    ["=R[0]C[-2] * R[0]C[-1]"],
                    ["=R[0]C[-2] * R[0]C[-1]"],
                    ["=R[0]C[-2] * R[0]C[-1]"],
                    ["=SUM(R[-3]C[0]:R[-1]C[0])"]
                ];
                
                let range = sheet.getRange("E2:E6");
                range.formulasR1C1 = data;
                range.format.autofitColumns();

                await context.sync();
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function getValues() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();
                let range = sheet.getRange("B2:E6");
                range.load("values");

                await context.sync();

                console.log(JSON.stringify(range.values, null, 4));
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function getTexts() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();
                let range = sheet.getRange("B2:E6");
                range.load("text");

                await context.sync();

                console.log(JSON.stringify(range.text, null, 4));
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }

    async function getFormulas() {
        try {
            await Excel.run(async (context) => {
                let sheet = context.workbook.worksheets.getActiveWorksheet();
                let range = sheet.getRange("B2:E6");
                range.load("formulas");

                await context.sync();

                console.log(JSON.stringify(range.formulas, null, 4));
            });

            console.log("Done!");
        }
        catch (error) {
            OfficeHelpers.Utilities.log(error);
        }
    }
  language: typescript
style:
  content: |
    body {
        margin: 0;
        padding: 10px;
    }


    /* Button customization, including overwriting some Fabric defaults */

    .ms-Button, .ms-Button:focus {
        background: #217346;
        border: #217346;
    }

        .ms-Button > .ms-Button-label,
        .ms-Button:focus > .ms-Button-label,
        .ms-Button:hover > .ms-Button-label {
            color: white;
        }

        .ms-Button:hover, .ms-Button:active {
            background: #164b2e;
        }

        .ms-Button.is-disabled, .ms-Button:disabled {
            background-color: #f4f4f4;
            border-color: #f4f4f4;
        }

        .ms-Button.is-disabled .ms-Button-label,
        .ms-Button:disabled .ms-Button-label {
            color: #a6a6a6;
        }

    #setup.ms-Button, #setup.ms-Button:focus {
        background: darkred;
        border: darkred;
    }

        #setup.ms-Button:hover, #setup.ms-Button:active {
            background: red;
        }

    #samples-container {
        margin-top: 20px;
    }

    #samples-container .ms-Button {
        display: block;
        margin-bottom: 5px;
    }

    #samples-container .ms-Button, #setup-container .ms-Button {
        margin-left: 20px;
        min-width: 80px;
    }
  language: css
template:
  content: >+
    <h2 class="ms-font-m">This sample demonstrates a variety of things you can
    do with the Range object.</h2>


    <div id="setup-container">
        <p class="ms-font-m">Click "setup" between runs to delete the contents of your active worksheet and add sample data:</p>

        <button id="setup" class="ms-Button">
            <span class="ms-Button-label">Setup</span>
        </button>
    </div>


    <div id="samples-container">
        <p class="ms-font-m">Sample snippets to try setting values and formulas:</p>

        <button id="set-value" class="ms-Button">
            <span class="ms-Button-label">Set value</span>
        </button>
        <button id="set-values" class="ms-Button">
            <span class="ms-Button-label">Set values</span>
        </button>
        <button id="set-formula" class="ms-Button">
            <span class="ms-Button-label">Set formula using A1-style</span>
        </button>
        <button id="set-formulas" class="ms-Button">
            <span class="ms-Button-label">Set formulas using A1-style</span>
        </button>
        <button id="set-formulas-r1c1" class="ms-Button">
            <span class="ms-Button-label">Set formulas using R1C1-style</span>
        </button>

        <p class="ms-font-m">Sample snippets to try getting values and formulas:</p>

        <button id="get-values" class="ms-Button">
            <span class="ms-Button-label">Get values</span>
        </button>
        <button id="get-texts" class="ms-Button">
            <span class="ms-Button-label">Get texts</span>
        </button>
        <button id="get-formulas" class="ms-Button">
            <span class="ms-Button-label">Get formulas</span>
        </button>
    </div>

  language: html
libraries: |-
  // Office.js
  https://appsforoffice.microsoft.com/lib/1/hosted/Office.js

  // NPM libraries
  jquery
  office-ui-fabric-js/dist/js/fabric.min.js
  office-ui-fabric-js/dist/css/fabric.min.css
  office-ui-fabric-js/dist/css/fabric.components.min.css
  @microsoft/office-js-helpers/dist/office.helpers.min.js
  core-js/client/core.min.js

  // IntelliSense: Use dt~library_name for DefinitelyTyped or URLs to d.ts files
  dt~office-js
  dt~jquery
  dt~core-js
  @microsoft/office-js-helpers/dist/office.helpers.d.ts
