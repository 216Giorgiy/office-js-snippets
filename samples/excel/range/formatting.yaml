id: excel_range_formatting
name: Formatting
description: Format a range
author: Microsoft
host: EXCEL
api_set:
    ExcelApi: 1.1
script:
    content: "$(\"#setup\").click(setup);\n\n$(\"#set-font-and-fill-color\").click(setFontAndFillColor);\n$(\"#set-number-format\").click(setNumberFormat);\n\nasync function setFontAndFillColor() {\n    try {\n        await Excel.run(async (context) => {\n            const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n            const range = sheet.getRange(\"B2:E2\");\n            range.format.fill.color = \"#4472C4\";;\n            range.format.font.color = \"white\";\n\n            await context.sync();\n        });\n    }\n    catch (error) {\n        OfficeHelpers.Utilities.log(error);\n    }\n}\n\nasync function setNumberFormat() {\n    try {\n        await Excel.run(async (context) => {\n            const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n            const formats = [\n                [\"0.00\", \"0.00\"],\n                [\"0.00\", \"0.00\"],\n                [\"0.00\", \"0.00\"]\n            ];\n\n            const range = sheet.getRange(\"D3:E5\");\n            range.numberFormat = formats;\n            await context.sync();\n        });\n    }\n    catch (error) {\n        OfficeHelpers.Utilities.log(error);\n    }\n}\n\nasync function setup() {\n    try {\n        await Excel.run(async (context) => {\n            const sheet = await OfficeHelpers.ExcelUtilities\n                .forceCreateSheet(context.workbook, \"Sample\");\n\n\t    \tconst data = [\n                [\"Product\", \"Qty\", \"Unit Price\", \"Total Price\"],\n                [\"Almonds\", 2, 7.50, \"=C3 * D3\"],\n                [\"Coffee\", 1, 34.50, \"=C4 * D4\"],\n                [\"Chocolate\", 5, 9.56, \"=C5 * D5\"]\n            ];\n\n            const range = sheet.getRange(\"B2:E5\");\n            range.values = data;\n            range.format.autofitColumns();\n\n            sheet.activate();\n            \n            await context.sync();\n        });\n    }\n    catch (error) {\n        OfficeHelpers.Utilities.log(error);\n    }\n}\n"
    language: typescript
template:
    content: |
        <section class="ms-font-m">
            <p>This sample shows how to format a range using the Excel API.</p>
        </section>

        <section class="setup ms-font-m">
            <h3>Set up</h3>
            <button id="setup" class="ms-Button">
                <span class="ms-Button-label">Add sample data</span>
            </button>
        </section>

        <section class="samples ms-font-m">
            <h3>Try it out</h3>
            <button id="set-font-and-fill-color" class="ms-Button">
                <span class="ms-Button-label">Set font and fill color</span>
            </button>   
            <button id="set-number-format" class="ms-Button">
                <span class="ms-Button-label">Set number format</span>
            </button> 
        </section>
    language: html
style:
    content: |
        section.samples {
            margin-top: 20px;
        }

        section.samples .ms-Button, section.setup .ms-Button {
            display: block;
            margin-bottom: 5px;
            margin-left: 20px;
            min-width: 80px;
        }
    language: css
libraries: |
    # Office.js
    https://appsforoffice.microsoft.com/lib/1/hosted/office.js

    # CSS Libraries
    office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
    office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

    # NPM libraries
    core-js@2.4.1/client/core.min.js
    @microsoft/office-js-helpers@0.6.0/dist/office.helpers.min.js
    jquery@3.1.1

    # IntelliSense: @types/library or node_modules paths or URL to d.ts files
    @types/office-js
    @types/core-js
    @microsoft/office-js-helpers/dist/office.helpers.d.ts
    @types/jquery
